---
title: "The Pipe(s) Operator(s) in R"
date: today 
toc: true
format:  
  html: 
    code-link: true
    df-print: paged
    embed-resources: true 
editor_options:  
  chunk_output_type: console
execute:
  warning: false
---

# Setup

```{r}
library(magrittr)
library(medicaldata)
library(tidyverse)
```

# The native pipe

The pipe(`|>`) takes the argument on the left and passes it as the first argument to the function on the right. 

`x |> f()` is equivalent to `f(x)`.

`x |> f(y)` is equivalent to `f(x, y)`.

`x |> f(y) |> g(z)` is equivalent to `g(f(x, y), z)`.

Using the pipe operator, we can chain together multiple operations in a way that is easier to read for a human. For example, using the pipe, matrioshka-like codes like this...

```{r}
str_c(
  str_c(
    round(
      pull(
        summarise(
          group_by(
            filter(covid_testing, result == "positive"),
            gender
          ),mean_age = mean(age, na.rm = TRUE)
        ), mean_age
      ), 2
    ), " years"
  ), collapse = " and "
)
```

...turn into a more linear and readable code where the order you read the functions is the actual order they are applied.

```{r}
covid_testing |> 
  filter(result == "positive") |> 
  group_by(gender) |> 
  summarise(
    mean_age = mean(age, na.rm = TRUE)
  ) |> 
  pull(mean_age) |> 
  round(2) |> 
  str_c(" years") |> 
  str_c(collapse = " and ")
```

